# copy和deepcopy深浅复制
import copy

list = [1,2,[3,4]]
a = copy.copy(list)
b = copy.deepcopy(list)
# 外层列表：[1,2,[3,4]]
# 内层列表：[3,4]
# 复杂子对象：[3,4] 认为包含嵌套结构的内层列表（字典）为复杂子对象
# 简单子对象：1，2
print(list,id(list))
print(a,id(a))
print(b,id(b))

# 测试修改外层列表的简单子对象
# 结果修改原始list之后，a和b并没有改变，因为是三个不同的对象
"""
浅拷贝有两种情况：
1.复制的对象中无复杂子对象，原来值的改变并不会影响浅复制的值，同时浅复制的值改变也不会影响原来的值。原来值的id值与浅复制原来的值不同
2.复制的对象中有复杂子对象，改变原来的值中的复杂子对象的值，会影响浅复制的值
深拷贝：完全复制独立，包括内层列表和字典
"""
list[0] = 10
print(list,id(list))
print("修改外层子对象1为10",a,id(a))
print("修改外层子对象1为10",b,id(b))

# 测试内层列表的值的修改，也就是测试复杂子对象的值的修改
# 结果表明copy浅拷贝并没有真正将内层列表（字典）独立拷贝出来，导致修改了list内层列表（字典）后的内层列表（字典）值也变化
# 结果表明deepcopy深拷贝可以将内层列表和字典独立拷贝出来，所以b的内层列表（字典）值不变
list[2][0] = 5
print(list,id(list))
print("修改复杂子对象3为5",a,id(a))
print("修改复杂子对象3为5",b,id(b))